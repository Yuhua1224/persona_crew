translate:
  description: >
    You are an expert at converting natural language into strict filtering criteria.
    Based on the user's persona description (e.g., "I'm looking for an outgoing middle-aged woman with two children"),
    translate it into database-ready filters.
    
    Filtering criteria can include:
    - Demographic constraints (e.g. gender, age, salary, family_member)
    - Big Five personality trait thresholds (e.g., extraversion > 3)
    - Specific questionnaire item responses (e.g., "Question 3 above 3" → Q3 > 3)

    The expected format is key-value pairs like:
    - age: 30~50
    - gender: female
    - family_member: >2
    - extraversion: >3
    - openness: >3
    - Q3: >3

  expected_output: >
    A dictionary of filtering criteria that can be used for database queries.
  output_type: dict

query:
  description: >
    You are a database search and aggregation expert.
    Based on the provided filtering criteria, retrieve all matching user data from the 'persona_data' table in MySQL.
    Each record includes answers to 50 personality questions, 5 trait scores,
    and demographic info such as age, salary, gender, and number of family members.
    
    Once retrieved, calculate the average for all numeric fields (Likert responses, trait scores, age, salary, family_member)
    and determine the mode (most common value) for gender.
    Combine these results into a single representative profile containing exactly 59 fields
    (50 questions, 5 traits, and 4 demographic values: gender, age, salary, family family_member).

  expected_output: >
    A 59-field representative profile ready for persona understanding and simulation.
  output_type: dict

construct:
  description: >
    You are a persona modeling and interpretation expert.
    Based on the 59-field representative profile (50 questionnaire answers, 5 traits, and demographics),
    deeply analyze the personality and lifestyle implied by these numbers.
    
    Then, craft an extremely vivid, context-rich textual description of this persona —
    including personality tendencies, communication style, likely interests, habits, and values —
    so that another agent can fully understand and mentally simulate this person when answering a questionnaire.
    Your description should feel like a natural, human-like character profile, not just a list of traits.

  expected_output: >
    A detailed natural-language persona description (1–3 paragraphs) that can be used as context for the questionnaire simulation.
  output_type: string

simulate:
  description: >
    You are a persona simulation agent. Based on the given detailed persona description from the 'construct' step,
    answer a Big Five questionnaire consisting of 50 items.
    The questionnaire metadata is provided in inputs['simulation_questions'], including the 50 questions about bigfive traits.
    Answer each question on a 1–5 scale. Ensure your responses realistically reflect the persona.

  expected_output: >
    A list of 50 answers, each an integer from 1 to 5, representing the completed questionnaire.
  output_type: list[int]

validate:
  description: >
    You are a personality evaluation expert. Compare two things:
    1. The simulated agent's 50-question responses.
    2. The average answers of the N users from the database.
    You will also receive questionnaire metadata (trait and reverse key) to help you score accurately.
    Calculate trait-level similarities and explain how closely the simulated persona aligns with the real sample.

  expected_output: >
    Trait-by-trait similarity scores (e.g., 85%, 73%) along with a summary report of match quality.
  output_type: dict

send_email:
  description: >
    You are a smart assistant. Send the results of the validation task and the summary report to a specified email.
    Use markdown formatting to organize the message, including a comparison table and trait insights.
    Your tone should be professional yet friendly.

  expected_output: >
    A confirmation of whether the email was sent successfully.
  output_type: string
